// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";
import "forge-std/console.sol";
import "src/Transactions.sol";
import "src/suavelib/Suave.sol";

contract TestTransactions is Test {
    using Transactions for *;

    function testLegacyTransactionRLPEncoding() public {
        Transactions.Legacy memory legacyTxn0 = Transactions.Legacy({
            to: address(0x095E7BAea6a6c7c4c2DfeB977eFac326aF552d87),
            gas: 50000,
            gasPrice: 10,
            value: 10,
            nonce: 0,
            data: bytes(""),
            chainId: 0,
            v: abi.encodePacked(hex"1b"),
            r: abi.encodePacked(hex"9bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094f"),
            s: abi.encodePacked(hex"8a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1")
        });

        bytes memory rlp = Transactions.encodeRLP(legacyTxn0);

        bytes memory expected = abi.encodePacked(
            hex"f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1"
        );
        assertEq0(rlp, expected);

        Transactions.Legacy memory legacyTxn1 = Transactions.decodeRLP(rlp);

        // re-encode to validate that the decoding was correct
        bytes memory rlp1 = Transactions.encodeRLP(legacyTxn1);
        assertEq0(rlp1, expected);
    }

    address public constant ANYALLOWED = 0x1111000000000000000000000000000042100001;

    function testSomething() public {
        bytes memory code =
            hex"608060405234801561001057600080fd5b506004361061002b5760003560e01c8063671ff78614610074575b600060405160200161005690602080825260059082015264616161616160d81b604082015260600190565b60408051602080825263414141418183015260608401909252925081f35b610087610082366004610277565b61009d565b604051610094919061034c565b60405180910390f35b60606000825160026100af9190610395565b67ffffffffffffffff8111156100c7576100c7610261565b6040519080825280601f01601f1916602001820160405280156100f1576020820181803683370190505b5060408051808201909152601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015290915060005b84518110156102375781825186838151811061013d5761013d6103b2565b016020015161014f919060f81c6103de565b8151811061015f5761015f6103b2565b01602001516001600160f81b0319168361017a836002610395565b8151811061018a5761018a6103b2565b60200101906001600160f81b031916908160001a9053508182518683815181106101b6576101b66103b2565b01602001516101c8919060f81c6103f2565b815181106101d8576101d86103b2565b01602001516001600160f81b031916836101f3836002610395565b6101fe906001610406565b8151811061020e5761020e6103b2565b60200101906001600160f81b031916908160001a9053508061022f81610419565b91505061011f565b50816040516020016102499190610432565b60405160208183030381529060405292505050919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561028957600080fd5b813567ffffffffffffffff808211156102a157600080fd5b818401915084601f8301126102b557600080fd5b8135818111156102c7576102c7610261565b604051601f8201601f19908116603f011681019083821181831017156102ef576102ef610261565b8160405282815287602084870101111561030857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60005b8381101561034357818101518382015260200161032b565b50506000910152565b602081526000825180602084015261036b816040850160208701610328565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176103ac576103ac61037f565b92915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6000826103ed576103ed6103c8565b500490565b600082610401576104016103c8565b500690565b808201808211156103ac576103ac61037f565b60006001820161042b5761042b61037f565b5060010190565b61060f60f31b81526000825161044f816002850160208701610328565b919091016002019291505056fea2646970667358221220308fa97990ba3aa76a873f441e6417af36f4e3900abae19398d9b6d7c5a70e5b64736f6c63430008130033";
        vm.etch(Suave.CONFIDENTIAL_INPUTS, code);

        (bool success, bytes memory data) = Suave.CONFIDENTIAL_INPUTS.staticcall(abi.encode());

        //(bool success, bytes memory data) = ANYALLOWED.staticcall(abi.encode());
        console.log(success);
        console.logBytes(data);
    }
}
